# Generated by Django 4.1.2 on 2025-09-09 11:20

import api.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('account_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=50, null=True, unique=True)),
                ('username', models.CharField(max_length=32, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('token', models.CharField(default=None, max_length=256, null=True)),
                ('token_expire', models.IntegerField(default=None, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_private', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('collection_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, default=None, max_length=8192, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True)),
                ('is_private', models.BooleanField(blank=True, default=False)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('sharing', models.BooleanField(blank=True, default=False)),
                ('creator', models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, to='api.account')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, default=None, max_length=8192, null=True)),
                ('color', models.CharField(blank=True, default=None, max_length=10, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('permission_manage_topics', models.BooleanField(blank=True, default=False)),
                ('permission_view_topics', models.BooleanField(blank=True, default=False)),
                ('permission_view_topics_log', models.BooleanField(blank=True, default=False)),
                ('permission_manage_collections', models.BooleanField(blank=True, default=False)),
                ('permission_view_collections', models.BooleanField(blank=True, default=False)),
                ('permission_manage_problems', models.BooleanField(blank=True, default=False)),
                ('permission_view_problems', models.BooleanField(blank=True, default=False)),
                ('creator', models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, to='api.account')),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('problem_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('language', models.CharField(max_length=15)),
                ('title', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('solution', models.TextField()),
                ('time_limit', models.FloatField(blank=True, default=1.5)),
                ('is_active', models.BooleanField(blank=True, default=True)),
                ('is_private', models.BooleanField(blank=True, default=False)),
                ('submission_regex', models.CharField(blank=True, default='.*', max_length=1024, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('sharing', models.BooleanField(blank=True, default=False)),
                ('allowed_languages', models.CharField(blank=True, default='', max_length=1024)),
                ('pdf_url', models.CharField(blank=True, default=None, max_length=256, null=True)),
                ('view_mode', models.CharField(blank=True, default='plate', max_length=10)),
                ('difficulty', models.IntegerField(blank=True, default=0)),
                ('creator', models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, to='api.account')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('submission_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('language', models.CharField(max_length=15)),
                ('submission_code', models.TextField()),
                ('is_passed', models.BooleanField()),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('score', models.IntegerField(default=0)),
                ('max_score', models.IntegerField(default=0)),
                ('passed_ratio', models.FloatField(default=0)),
                ('account', models.ForeignKey(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, to='api.account')),
                ('problem', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='api.problem')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('topic_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, default=None, max_length=8192, null=True)),
                ('image_url', models.CharField(blank=True, default=None, max_length=256, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True)),
                ('is_private', models.BooleanField(blank=True, default=False)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('sharing', models.BooleanField(blank=True, default=False)),
                ('creator', models.ForeignKey(db_column='creator_id', on_delete=django.db.models.deletion.CASCADE, to='api.account')),
            ],
        ),
        migrations.CreateModel(
            name='TopicProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='api.problem')),
                ('topic', models.ForeignKey(db_column='topic_id', on_delete=django.db.models.deletion.CASCADE, to='api.topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicGroupPermission',
            fields=[
                ('topic_group_permission_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('permission_manage_topics', models.BooleanField(blank=True, default=False)),
                ('permission_view_topics', models.BooleanField(blank=True, default=False)),
                ('permission_view_topics_log', models.BooleanField(blank=True, default=False)),
                ('group', models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, to='api.group')),
                ('topic', models.ForeignKey(db_column='topic_id', on_delete=django.db.models.deletion.CASCADE, to='api.topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicCollection',
            fields=[
                ('id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('order', models.IntegerField(blank=True, default=0)),
                ('collection', models.ForeignKey(db_column='collection_id', on_delete=django.db.models.deletion.CASCADE, to='api.collection')),
                ('topic', models.ForeignKey(db_column='topic_id', on_delete=django.db.models.deletion.CASCADE, to='api.topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicAccountAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account', models.ForeignKey(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, to='api.account')),
                ('topic', models.ForeignKey(db_column='topic_id', on_delete=django.db.models.deletion.CASCADE, to='api.topic')),
            ],
        ),
        migrations.CreateModel(
            name='Testcase',
            fields=[
                ('testcase_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('input', models.TextField()),
                ('output', models.TextField(null=True)),
                ('runtime_status', models.CharField(max_length=16)),
                ('deprecated', models.BooleanField(blank=True, default=False)),
                ('problem', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='api.problem')),
            ],
        ),
        migrations.CreateModel(
            name='SubmissionTestcase',
            fields=[
                ('submission_testcase_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('output', models.TextField(blank=True, null=True)),
                ('is_passed', models.BooleanField(blank=True, default=False)),
                ('runtime_status', models.CharField(max_length=10)),
                ('submission', models.ForeignKey(db_column='submission_id', on_delete=django.db.models.deletion.CASCADE, to='api.submission')),
                ('testcase', models.ForeignKey(db_column='testcase_id', on_delete=django.db.models.deletion.CASCADE, to='api.testcase')),
            ],
        ),
        migrations.AddField(
            model_name='submission',
            name='topic',
            field=models.ForeignKey(db_column='topic_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.topic'),
        ),
        migrations.CreateModel(
            name='ProblemGroupPermission',
            fields=[
                ('problem_group_permission_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('permission_manage_problems', models.BooleanField(blank=True, default=False)),
                ('permission_view_problems', models.BooleanField(blank=True, default=False)),
                ('group', models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, to='api.group')),
                ('problem', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='api.problem')),
            ],
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('group_member_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('account', models.ForeignKey(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, to='api.account')),
                ('group', models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, to='api.group')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionProblem',
            fields=[
                ('id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('order', models.IntegerField(blank=True, default=0)),
                ('collection', models.ForeignKey(db_column='collection_id', on_delete=django.db.models.deletion.CASCADE, to='api.collection')),
                ('problem', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='api.problem')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionGroupPermission',
            fields=[
                ('collection_group_permission_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('permission_manage_collections', models.BooleanField(blank=True, default=False)),
                ('permission_view_collections', models.BooleanField(blank=True, default=False)),
                ('collection', models.ForeignKey(db_column='collection_id', on_delete=django.db.models.deletion.CASCADE, to='api.collection')),
                ('group', models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, to='api.group')),
            ],
        ),
        migrations.CreateModel(
            name='BestSubmission',
            fields=[
                ('best_submission_id', models.CharField(blank=True, default=api.models.generate_uuid4_hex, max_length=32, primary_key=True, serialize=False)),
                ('account', models.ForeignKey(db_column='account_id', on_delete=django.db.models.deletion.CASCADE, to='api.account')),
                ('problem', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='api.problem')),
                ('submission', models.ForeignKey(db_column='submission_id', on_delete=django.db.models.deletion.CASCADE, to='api.submission')),
                ('topic', models.ForeignKey(db_column='topic_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.topic')),
            ],
        ),
    ]
